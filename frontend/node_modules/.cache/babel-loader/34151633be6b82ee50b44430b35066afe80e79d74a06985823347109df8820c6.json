{"ast":null,"code":"import io from 'socket.io-client';\nconst SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.isConnected = false;\n  }\n  connect() {\n    if (this.socket && this.isConnected) {\n      return this.socket;\n    }\n    try {\n      this.socket = io(SOCKET_URL, {\n        transports: ['websocket', 'polling'],\n        autoConnect: true,\n        reconnection: true,\n        reconnectionDelay: 1000,\n        reconnectionAttempts: 5,\n        timeout: 20000\n      });\n      this.socket.on('connect', () => {\n        console.log('Socket connected:', this.socket.id);\n        this.isConnected = true;\n      });\n      this.socket.on('disconnect', reason => {\n        console.log('Socket disconnected:', reason);\n        this.isConnected = false;\n      });\n      this.socket.on('connect_error', error => {\n        console.error('Socket connection error:', error);\n        this.isConnected = false;\n      });\n      this.socket.on('reconnect', attemptNumber => {\n        console.log('Socket reconnected after', attemptNumber, 'attempts');\n        this.isConnected = true;\n      });\n      return this.socket;\n    } catch (error) {\n      console.error('Failed to create socket connection:', error);\n      return null;\n    }\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.isConnected = false;\n      console.log('Socket manually disconnected');\n    }\n  }\n\n  // Library-specific methods\n  joinLibrary(libraryId) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('join-library', libraryId);\n      console.log(`Joined library room: ${libraryId}`);\n    }\n  }\n  leaveLibrary(libraryId) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('leave-library', libraryId);\n      console.log(`Left library room: ${libraryId}`);\n    }\n  }\n\n  // Real-time seat update listeners\n  onSeatUpdate(callback) {\n    if (this.socket) {\n      this.socket.on('seat-update', data => {\n        console.log('Received seat update:', data);\n        callback(data);\n      });\n    }\n  }\n  onLibrarySeatUpdate(callback) {\n    if (this.socket) {\n      this.socket.on('library-seat-update', data => {\n        console.log('Received library seat update:', data);\n        callback(data);\n      });\n    }\n  }\n  offSeatUpdate() {\n    if (this.socket) {\n      this.socket.off('seat-update');\n      this.socket.off('library-seat-update');\n    }\n  }\n\n  // Event seat updates\n  onEventSeatUpdate(callback) {\n    if (this.socket) {\n      this.socket.on('event-seat-update', callback);\n    }\n  }\n  offEventSeatUpdate() {\n    if (this.socket) {\n      this.socket.off('event-seat-update');\n    }\n  }\n\n  // Emit seat booking events\n  emitSeatBooked(data) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('seat-booked', data);\n    }\n  }\n  emitSeatReleased(data) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('seat-released', data);\n    }\n  }\n\n  // Request current library status\n  requestLibraryStatus(libraryId) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('request-library-status', libraryId);\n    }\n  }\n\n  // Check connection status\n  isSocketConnected() {\n    return this.socket && this.isConnected;\n  }\n\n  // Get socket ID\n  getSocketId() {\n    return this.socket ? this.socket.id : null;\n  }\n}\n\n// Create singleton instance\nconst socketService = new SocketService();\nexport default socketService;","map":{"version":3,"names":["io","SOCKET_URL","process","env","REACT_APP_SOCKET_URL","SocketService","constructor","socket","isConnected","connect","transports","autoConnect","reconnection","reconnectionDelay","reconnectionAttempts","timeout","on","console","log","id","reason","error","attemptNumber","disconnect","joinLibrary","libraryId","emit","leaveLibrary","onSeatUpdate","callback","data","onLibrarySeatUpdate","offSeatUpdate","off","onEventSeatUpdate","offEventSeatUpdate","emitSeatBooked","emitSeatReleased","requestLibraryStatus","isSocketConnected","getSocketId","socketService"],"sources":["C:/Users/LENOVO/OneDrive/Desktop/Projects_web/campus-connect/frontend/src/services/socket.js"],"sourcesContent":["import io from 'socket.io-client';\r\n\r\nconst SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\r\n\r\nclass SocketService {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.isConnected = false;\r\n  }\r\n\r\n  connect() {\r\n    if (this.socket && this.isConnected) {\r\n      return this.socket;\r\n    }\r\n\r\n    try {\r\n      this.socket = io(SOCKET_URL, {\r\n        transports: ['websocket', 'polling'],\r\n        autoConnect: true,\r\n        reconnection: true,\r\n        reconnectionDelay: 1000,\r\n        reconnectionAttempts: 5,\r\n        timeout: 20000,\r\n      });\r\n\r\n      this.socket.on('connect', () => {\r\n        console.log('Socket connected:', this.socket.id);\r\n        this.isConnected = true;\r\n      });\r\n\r\n      this.socket.on('disconnect', (reason) => {\r\n        console.log('Socket disconnected:', reason);\r\n        this.isConnected = false;\r\n      });\r\n\r\n      this.socket.on('connect_error', (error) => {\r\n        console.error('Socket connection error:', error);\r\n        this.isConnected = false;\r\n      });\r\n\r\n      this.socket.on('reconnect', (attemptNumber) => {\r\n        console.log('Socket reconnected after', attemptNumber, 'attempts');\r\n        this.isConnected = true;\r\n      });\r\n\r\n      return this.socket;\r\n    } catch (error) {\r\n      console.error('Failed to create socket connection:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n      this.isConnected = false;\r\n      console.log('Socket manually disconnected');\r\n    }\r\n  }\r\n\r\n  // Library-specific methods\r\n  joinLibrary(libraryId) {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit('join-library', libraryId);\r\n      console.log(`Joined library room: ${libraryId}`);\r\n    }\r\n  }\r\n\r\n  leaveLibrary(libraryId) {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit('leave-library', libraryId);\r\n      console.log(`Left library room: ${libraryId}`);\r\n    }\r\n  }\r\n\r\n  // Real-time seat update listeners\r\n  onSeatUpdate(callback) {\r\n    if (this.socket) {\r\n      this.socket.on('seat-update', (data) => {\r\n        console.log('Received seat update:', data);\r\n        callback(data);\r\n      });\r\n    }\r\n  }\r\n\r\n  onLibrarySeatUpdate(callback) {\r\n    if (this.socket) {\r\n      this.socket.on('library-seat-update', (data) => {\r\n        console.log('Received library seat update:', data);\r\n        callback(data);\r\n      });\r\n    }\r\n  }\r\n\r\n  offSeatUpdate() {\r\n    if (this.socket) {\r\n      this.socket.off('seat-update');\r\n      this.socket.off('library-seat-update');\r\n    }\r\n  }\r\n\r\n  // Event seat updates\r\n  onEventSeatUpdate(callback) {\r\n    if (this.socket) {\r\n      this.socket.on('event-seat-update', callback);\r\n    }\r\n  }\r\n\r\n  offEventSeatUpdate() {\r\n    if (this.socket) {\r\n      this.socket.off('event-seat-update');\r\n    }\r\n  }\r\n\r\n  // Emit seat booking events\r\n  emitSeatBooked(data) {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit('seat-booked', data);\r\n    }\r\n  }\r\n\r\n  emitSeatReleased(data) {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit('seat-released', data);\r\n    }\r\n  }\r\n\r\n  // Request current library status\r\n  requestLibraryStatus(libraryId) {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit('request-library-status', libraryId);\r\n    }\r\n  }\r\n\r\n  // Check connection status\r\n  isSocketConnected() {\r\n    return this.socket && this.isConnected;\r\n  }\r\n\r\n  // Get socket ID\r\n  getSocketId() {\r\n    return this.socket ? this.socket.id : null;\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst socketService = new SocketService();\r\n\r\nexport default socketService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}